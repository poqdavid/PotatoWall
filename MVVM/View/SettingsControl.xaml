<UserControl
    x:Class="PotatoWall.MVVM.View.SettingsControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:local="clr-namespace:PotatoWall"
    xmlns:localConverters="clr-namespace:PotatoWall.Converters"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:viewmodel="clr-namespace:PotatoWall.MVVM.ViewModel"
    MinWidth="270"
    HorizontalAlignment="Stretch"
    VerticalAlignment="Stretch"
    d:DataContext="{d:DesignInstance Type=viewmodel:SettingsViewModel}"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Menu.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.CheckBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ComboBox.xaml" />

                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.RadioButton.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToggleButton.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Font.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ListBox.xaml" />

                <ResourceDictionary Source="pack://application:,,,/MaterialDesignExtensions;component/Themes/Generic.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <localConverters:DialogHostStackPanelWidthConverter x:Key="DialogHostStackPanelWidthConverter" />
            <localConverters:DialogHostStackPanelHeightConverter x:Key="DialogHostStackPanelHeightConverter" />
            <localConverters:MultiConverter x:Key="MultiConverter" />
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid
        x:Name="Settings_MAIN"
        MinWidth="270"
        MaxWidth="{Binding ActualWidth, Converter={StaticResource DialogHostStackPanelWidthConverter}, ConverterParameter=100.0, ElementName=window_client, Mode=OneWay}"
        MaxHeight="{Binding ActualHeight, Converter={StaticResource DialogHostStackPanelHeightConverter}, ConverterParameter=100.0, ElementName=window_client, Mode=OneWay}"
        Margin="16">

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="25" />

            <RowDefinition Height="Auto" />
            <RowDefinition Height="5" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <TextBlock Grid.Row="0" Grid.ColumnSpan="3"><Run Text="Settings" /></TextBlock>

        <Grid
            x:Name="Settings_LEFT"
            Grid.Row="2"
            Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="25" />

                <RowDefinition Height="Auto" />
                <RowDefinition Height="5" />
                <RowDefinition Height="Auto" />

                <RowDefinition Height="15" />

                <RowDefinition Height="Auto" />

                <RowDefinition Height="15" />

                <RowDefinition Height="Auto" />

                <RowDefinition Height="15" />

                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <GroupBox
                Grid.Row="0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch">
                <GroupBox.Header>
                    UI options.
                </GroupBox.Header>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBlock
                        Grid.Row="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"><Run Text="Theme Color: " /></TextBlock>
                    <ComboBox
                        x:Name="theme_p"
                        Grid.Row="2"
                        Width="Auto"
                        Height="Auto"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"
                        DisplayMemberPath="ColorName"
                        ItemsSource="{Binding IColorData.ColorDataList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        SelectedIndex="{Binding ISettings.GUI.XTheme.Color, BindsDirectlyToSource=True, IsAsync=False, Mode=TwoWay, NotifyOnTargetUpdated=False, NotifyOnValidationError=False, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True, ValidatesOnExceptions=False, ValidatesOnDataErrors=False}"
                        SelectedValuePath="ColorName">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged">
                                <i:InvokeCommandAction Command="{Binding SelectionChangedCommand}">
                                    <i:InvokeCommandAction.CommandParameter>
                                        <MultiBinding Converter="{StaticResource MultiConverter}">
                                            <Binding ElementName="theme_p" Path="SelectedItem" />
                                            <Binding ElementName="theme_p" Path="SelectedIndex" />
                                        </MultiBinding>
                                    </i:InvokeCommandAction.CommandParameter>
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <ComboBox.ItemContainerStyle>
                            <Style BasedOn="{StaticResource MaterialDesignComboBoxItemStyle}" TargetType="{x:Type ComboBoxItem}">
                                <Setter Property="Tag" Value="{Binding ColorMetadata}" />
                                <Setter Property="IsEnabled" Value="{Binding ColorEnabled}" />
                                <Setter Property="IsHitTestVisible" Value="{Binding ColorEnabled}" />
                            </Style>
                        </ComboBox.ItemContainerStyle>
                    </ComboBox>
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="2">
                <GroupBox.Header>
                    FriesWall options.
                </GroupBox.Header>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="15" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="15" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBlock
                        Grid.Row="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"><Run Text="White list / Auto RegEX: " /></TextBlock>
                    <CheckBox
                        Grid.Row="2"
                        HorizontalContentAlignment="Left"
                        Content="Enable"
                        IsChecked="{Binding ISettings.EnableRegEX, BindsDirectlyToSource=True, Mode=TwoWay, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox
                        x:Name="TextBox_RegEX"
                        Grid.Row="4"
                        HorizontalContentAlignment="Stretch"
                        VerticalContentAlignment="Center"
                        Text="{Binding ISettings.RegEX, BindsDirectlyToSource=True, Mode=TwoWay, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged}" />

                    <TextBlock
                        Grid.Row="6"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"><Run Text="IP Activity Time: " /></TextBlock>
                    <TextBox
                        x:Name="TextBox_IPActivityTime"
                        Grid.Row="8"
                        HorizontalContentAlignment="Stretch"
                        VerticalContentAlignment="Center"
                        Text="{Binding ISettings.IPActivityTime, BindsDirectlyToSource=True, Mode=TwoWay, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged}" />

                    <TextBlock
                        Grid.Row="10"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"><Run Text="IP Search Duration: " /></TextBlock>
                    <TextBox
                        x:Name="TextBox_IPSearchDuration"
                        Grid.Row="12"
                        HorizontalContentAlignment="Stretch"
                        VerticalContentAlignment="Center"
                        Text="{Binding ISettings.IPSearchDuration, BindsDirectlyToSource=True, Mode=TwoWay, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged}" />
                </Grid>
            </GroupBox>
        </Grid>
        <Grid
            x:Name="Settings_RIGHT"
            Grid.Row="2"
            Grid.Column="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="25" />

                <RowDefinition Height="Auto" />
                <RowDefinition Height="5" />
                <RowDefinition Height="Auto" />

                <RowDefinition Height="15" />

                <RowDefinition Height="Auto" />

                <RowDefinition Height="15" />

                <RowDefinition Height="Auto" />

                <RowDefinition Height="15" />

                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <GroupBox Grid.Row="0">
                <GroupBox.Header>
                    WinDivert options.
                </GroupBox.Header>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />

                        <RowDefinition Height="15" />

                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />

                        <RowDefinition Height="15" />

                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />

                        <RowDefinition Height="15" />

                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBlock
                        Grid.Row="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"><Run Text="WinDivert Filter: " /></TextBlock>

                    <TextBox
                        x:Name="TextBox_WinDFilter"
                        Grid.Row="2"
                        HorizontalContentAlignment="Stretch"
                        VerticalContentAlignment="Center"
                        Text="{Binding ISettings.WinDivert.Filter, BindsDirectlyToSource=True, Mode=TwoWay, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged}" />

                    <TextBlock
                        Grid.Row="4"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"><Run Text="WinDivert QueueLen: " /></TextBlock>

                    <TextBox
                        x:Name="TextBox_WinDQueueLen"
                        Grid.Row="6"
                        HorizontalContentAlignment="Stretch"
                        VerticalContentAlignment="Center"
                        Text="{Binding ISettings.WinDivert.QueueLen, BindsDirectlyToSource=True, Mode=TwoWay, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged}" />

                    <TextBlock
                        Grid.Row="8"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"><Run Text="WinDivert QueueTime: " /></TextBlock>

                    <TextBox
                        x:Name="TextBox_WinDQueueTime"
                        Grid.Row="10"
                        HorizontalContentAlignment="Stretch"
                        VerticalContentAlignment="Center"
                        Text="{Binding ISettings.WinDivert.QueueTime, BindsDirectlyToSource=True, Mode=TwoWay, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged}" />

                    <TextBlock
                        Grid.Row="12"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"><Run Text="WinDivert QueueSize: " /></TextBlock>

                    <TextBox
                        x:Name="TextBox_WinDQueueSize"
                        Grid.Row="14"
                        HorizontalContentAlignment="Stretch"
                        VerticalContentAlignment="Center"
                        Text="{Binding ISettings.WinDivert.QueueSize, BindsDirectlyToSource=True, Mode=TwoWay, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged}" />
                </Grid>
            </GroupBox>

            <GroupBox Grid.Row="2">
                <GroupBox.Header>
                    WinDivert function.
                </GroupBox.Header>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="10" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <RadioButton
                        Grid.Row="0"
                        Content="WinDivertRecvEx"
                        IsChecked="{Binding ISettings.WinDivert.WinDivertRecvEx, BindsDirectlyToSource=True, Mode=TwoWay, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged}" />
                    <RadioButton
                        Grid.Row="2"
                        Content="WinDivertRecv"
                        IsChecked="{Binding ISettings.WinDivert.WinDivertRecv, BindsDirectlyToSource=True, Mode=TwoWay, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PotatoWallUI}}, UpdateSourceTrigger=PropertyChanged}" />
                </Grid>
            </GroupBox>
        </Grid>

        <StackPanel
            Grid.Row="4"
            Grid.ColumnSpan="3"
            HorizontalAlignment="Right"
            Orientation="Horizontal">
            <Button
                x:Name="Settings_Button_CLOSE"
                d:Click="DialogHost_Button_CLOSE_Click"
                Command="materialDesign:DialogHost.CloseDialogCommand"
                Content="CLOSE"
                IsDefault="True" />
        </StackPanel>
    </Grid>
</UserControl>